"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = [{
  blockchain: {
    name: 'Ripple Testnet',
    worker: 'js/ripple-worker.ts',
    server: [//'wss://foo1.bar',
    'wss://s.altnet.rippletest.net'],
    debug: true
  },
  data: {
    // address: 'rNaqKtKrMSwpwZSzRckPf7S96DkimjkF4H', // (all all acc 1)
    address: 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh',
    // from http://ripplerm.github.io/ripple-wallet/
    accountInfoOptions: {
      type: 'transactions',
      page: 0,
      from: 0,
      to: 0
    },
    estimateFeeOptions: {
      transaction: undefined,
      levels: [{
        blocks: 1
      }]
    },
    tx: '304402202f0046af4147a8646a1c06ef63789698756cffb5e2e380cd2740688b71bd15a302201797d6b55175b6b326257737f331f701f1c9d8271fcc990644ef12d1bf3bdf80',
    subscribe: 'rBdHGo5fksQotC4x5t7BtaR8vMW5EDqk6S,rNaqKtKrMSwpwZSzRckPf7S96DkimjkF4H,rBKz5MC2iXdoS3XgnNSYmF69K1Yo4NS3Ws'
  },
  selected: false
}, {
  blockchain: {
    name: 'Ripple Mainnet',
    worker: 'js/ripple-worker.ts',
    server: ['wss://s1.ripple.com'],
    debug: true
  },
  data: {
    address: 'rJb5KsHsDHF1YS5B5DU6QCkH5NsPaKQTcy',
    // some exchange
    // address: 'rsG1sNifXJxGS2nDQ9zHyoe1S5APrtwpjV', // another exchange
    accountInfoOptions: {
      type: 'transactions',
      page: 0,
      from: 0,
      to: 0
    },
    estimateFeeOptions: {
      transaction: undefined,
      levels: [1]
    },
    tx: '304402202f0046af4147a8646a1c06ef63789698756cffb5e2e380cd2740688b71bd15a302201797d6b55175b6b326257737f331f701f1c9d8271fcc990644ef12d1bf3bdf80',
    // subscribe: 'rJb5KsHsDHF1YS5B5DU6QCkH5NsPaKQTcy,rsG1sNifXJxGS2nDQ9zHyoe1S5APrtwpjV'
    subscribe: 'rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys'
  },
  selected: false
}, {
  blockchain: {
    name: 'Ethereum Testnet',
    worker: 'js/blockbook-worker.ts',
    // server: ['wss://blockbook-dev.corp:19136'],
    server: ['wss://blockbook-dev.corp.sldev.cz:19136'],
    // server: 'https://testnet-bitcore1.trezor.io',
    // server: 'wss://ropsten1.trezor.io/socket.io/?transport=websocket',
    debug: true
  },
  data: {
    // address: '0x103262f243e6f67d12d6a4ea0d45302c1fa4bb0a',
    address: '0x73d0385F4d8E00C5e6504C6030F47BF6212736A8',
    accountInfoOptions: {
      start: '',
      limit: 0
    },
    estimateFeeOptions: {},
    tx: '',
    subscribe: '0x103262f243e6f67d12d6a4ea0d45302c1fa4bb0a'
  },
  selected: true
}];
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91aS9jb25maWcudHMiXSwibmFtZXMiOlsiYmxvY2tjaGFpbiIsIm5hbWUiLCJ3b3JrZXIiLCJzZXJ2ZXIiLCJkZWJ1ZyIsImRhdGEiLCJhZGRyZXNzIiwiYWNjb3VudEluZm9PcHRpb25zIiwidHlwZSIsInBhZ2UiLCJmcm9tIiwidG8iLCJlc3RpbWF0ZUZlZU9wdGlvbnMiLCJ0cmFuc2FjdGlvbiIsInVuZGVmaW5lZCIsImxldmVscyIsImJsb2NrcyIsInR4Iiwic3Vic2NyaWJlIiwic2VsZWN0ZWQiLCJzdGFydCIsImxpbWl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7ZUFBZSxDQUNYO0FBQ0lBLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUUsZ0JBREU7QUFFUkMsSUFBQUEsTUFBTSxFQUFFLHFCQUZBO0FBR1JDLElBQUFBLE1BQU0sRUFBRSxDQUNKO0FBRUEsbUNBSEksQ0FIQTtBQVFSQyxJQUFBQSxLQUFLLEVBQUU7QUFSQyxHQURoQjtBQVdJQyxFQUFBQSxJQUFJLEVBQUU7QUFDRjtBQUNBQyxJQUFBQSxPQUFPLEVBQUUsb0NBRlA7QUFFNkM7QUFDL0NDLElBQUFBLGtCQUFrQixFQUFFO0FBQ2hCQyxNQUFBQSxJQUFJLEVBQUUsY0FEVTtBQUVoQkMsTUFBQUEsSUFBSSxFQUFFLENBRlU7QUFHaEJDLE1BQUFBLElBQUksRUFBRSxDQUhVO0FBSWhCQyxNQUFBQSxFQUFFLEVBQUU7QUFKWSxLQUhsQjtBQVNGQyxJQUFBQSxrQkFBa0IsRUFBRTtBQUNoQkMsTUFBQUEsV0FBVyxFQUFFQyxTQURHO0FBRWhCQyxNQUFBQSxNQUFNLEVBQUUsQ0FDSjtBQUFFQyxRQUFBQSxNQUFNLEVBQUU7QUFBVixPQURJO0FBRlEsS0FUbEI7QUFlRkMsSUFBQUEsRUFBRSxFQUFFLDhJQWZGO0FBZ0JGQyxJQUFBQSxTQUFTLEVBQUU7QUFoQlQsR0FYVjtBQTZCSUMsRUFBQUEsUUFBUSxFQUFFO0FBN0JkLENBRFcsRUFnQ1g7QUFDSW5CLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUUsZ0JBREU7QUFFUkMsSUFBQUEsTUFBTSxFQUFFLHFCQUZBO0FBR1JDLElBQUFBLE1BQU0sRUFBRSxDQUNKLHFCQURJLENBSEE7QUFNUkMsSUFBQUEsS0FBSyxFQUFFO0FBTkMsR0FEaEI7QUFTSUMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLElBQUFBLE9BQU8sRUFBRSxvQ0FEUDtBQUM2QztBQUMvQztBQUNBQyxJQUFBQSxrQkFBa0IsRUFBRTtBQUNoQkMsTUFBQUEsSUFBSSxFQUFFLGNBRFU7QUFFaEJDLE1BQUFBLElBQUksRUFBRSxDQUZVO0FBR2hCQyxNQUFBQSxJQUFJLEVBQUUsQ0FIVTtBQUloQkMsTUFBQUEsRUFBRSxFQUFFO0FBSlksS0FIbEI7QUFTRkMsSUFBQUEsa0JBQWtCLEVBQUU7QUFDaEJDLE1BQUFBLFdBQVcsRUFBRUMsU0FERztBQUVoQkMsTUFBQUEsTUFBTSxFQUFFLENBQ0osQ0FESTtBQUZRLEtBVGxCO0FBZUZFLElBQUFBLEVBQUUsRUFBRSw4SUFmRjtBQWdCRjtBQUNBQyxJQUFBQSxTQUFTLEVBQUU7QUFqQlQsR0FUVjtBQTRCSUMsRUFBQUEsUUFBUSxFQUFFO0FBNUJkLENBaENXLEVBOERYO0FBQ0luQixFQUFBQSxVQUFVLEVBQUU7QUFDUkMsSUFBQUEsSUFBSSxFQUFFLGtCQURFO0FBRVJDLElBQUFBLE1BQU0sRUFBRSx3QkFGQTtBQUdSO0FBQ0FDLElBQUFBLE1BQU0sRUFBRSxDQUFDLHlDQUFELENBSkE7QUFLUjtBQUNBO0FBQ0FDLElBQUFBLEtBQUssRUFBRTtBQVBDLEdBRGhCO0FBVUlDLEVBQUFBLElBQUksRUFBRTtBQUNGO0FBQ0FDLElBQUFBLE9BQU8sRUFBRSw0Q0FGUDtBQUdGQyxJQUFBQSxrQkFBa0IsRUFBRTtBQUNoQmEsTUFBQUEsS0FBSyxFQUFFLEVBRFM7QUFFaEJDLE1BQUFBLEtBQUssRUFBRTtBQUZTLEtBSGxCO0FBT0ZULElBQUFBLGtCQUFrQixFQUFFLEVBUGxCO0FBVUZLLElBQUFBLEVBQUUsRUFBRSxFQVZGO0FBV0ZDLElBQUFBLFNBQVMsRUFBRTtBQVhULEdBVlY7QUF1QklDLEVBQUFBLFFBQVEsRUFBRTtBQXZCZCxDQTlEVyxDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgW1xuICAgIHtcbiAgICAgICAgYmxvY2tjaGFpbjoge1xuICAgICAgICAgICAgbmFtZTogJ1JpcHBsZSBUZXN0bmV0JyxcbiAgICAgICAgICAgIHdvcmtlcjogJ2pzL3JpcHBsZS13b3JrZXIudHMnLFxuICAgICAgICAgICAgc2VydmVyOiBbXG4gICAgICAgICAgICAgICAgLy8nd3NzOi8vZm9vMS5iYXInLFxuICAgICAgICAgICAgICAgIC8vJ3dzczovL2ZvbzIuYmFyJyxcbiAgICAgICAgICAgICAgICAnd3NzOi8vcy5hbHRuZXQucmlwcGxldGVzdC5uZXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRlYnVnOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC8vIGFkZHJlc3M6ICdyTmFxS3RLck1Td3B3WlN6UmNrUGY3Uzk2RGtpbWprRjRIJywgLy8gKGFsbCBhbGwgYWNjIDEpXG4gICAgICAgICAgICBhZGRyZXNzOiAnckhiOUNKQVd5QjRyajkxVlJXbjk2RGt1a0c0YndkdHlUaCcsIC8vIGZyb20gaHR0cDovL3JpcHBsZXJtLmdpdGh1Yi5pby9yaXBwbGUtd2FsbGV0L1xuICAgICAgICAgICAgYWNjb3VudEluZm9PcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgcGFnZTogMCxcbiAgICAgICAgICAgICAgICBmcm9tOiAwLFxuICAgICAgICAgICAgICAgIHRvOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVzdGltYXRlRmVlT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbGV2ZWxzOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgYmxvY2tzOiAxIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHg6ICczMDQ0MDIyMDJmMDA0NmFmNDE0N2E4NjQ2YTFjMDZlZjYzNzg5Njk4NzU2Y2ZmYjVlMmUzODBjZDI3NDA2ODhiNzFiZDE1YTMwMjIwMTc5N2Q2YjU1MTc1YjZiMzI2MjU3NzM3ZjMzMWY3MDFmMWM5ZDgyNzFmY2M5OTA2NDRlZjEyZDFiZjNiZGY4MCcsXG4gICAgICAgICAgICBzdWJzY3JpYmU6ICdyQmRIR281ZmtzUW90QzR4NXQ3QnRhUjh2TVc1RURxazZTLHJOYXFLdEtyTVN3cHdaU3pSY2tQZjdTOTZEa2ltamtGNEgsckJLejVNQzJpWGRvUzNYZ25OU1ltRjY5SzFZbzROUzNXcydcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGJsb2NrY2hhaW46IHtcbiAgICAgICAgICAgIG5hbWU6ICdSaXBwbGUgTWFpbm5ldCcsXG4gICAgICAgICAgICB3b3JrZXI6ICdqcy9yaXBwbGUtd29ya2VyLnRzJyxcbiAgICAgICAgICAgIHNlcnZlcjogW1xuICAgICAgICAgICAgICAgICd3c3M6Ly9zMS5yaXBwbGUuY29tJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkZWJ1ZzogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhZGRyZXNzOiAnckpiNUtzSHNESEYxWVM1QjVEVTZRQ2tINU5zUGFLUVRjeScsIC8vIHNvbWUgZXhjaGFuZ2VcbiAgICAgICAgICAgIC8vIGFkZHJlc3M6ICdyc0cxc05pZlhKeEdTMm5EUTl6SHlvZTFTNUFQcnR3cGpWJywgLy8gYW5vdGhlciBleGNoYW5nZVxuICAgICAgICAgICAgYWNjb3VudEluZm9PcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgcGFnZTogMCxcbiAgICAgICAgICAgICAgICBmcm9tOiAwLFxuICAgICAgICAgICAgICAgIHRvOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVzdGltYXRlRmVlT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbGV2ZWxzOiBbXG4gICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR4OiAnMzA0NDAyMjAyZjAwNDZhZjQxNDdhODY0NmExYzA2ZWY2Mzc4OTY5ODc1NmNmZmI1ZTJlMzgwY2QyNzQwNjg4YjcxYmQxNWEzMDIyMDE3OTdkNmI1NTE3NWI2YjMyNjI1NzczN2YzMzFmNzAxZjFjOWQ4MjcxZmNjOTkwNjQ0ZWYxMmQxYmYzYmRmODAnLFxuICAgICAgICAgICAgLy8gc3Vic2NyaWJlOiAnckpiNUtzSHNESEYxWVM1QjVEVTZRQ2tINU5zUGFLUVRjeSxyc0cxc05pZlhKeEdTMm5EUTl6SHlvZTFTNUFQcnR3cGpWJ1xuICAgICAgICAgICAgc3Vic2NyaWJlOiAnck1CenA4Q2dwRTQ0MWNwNVBWeUE5cnBWVjdvVDhoUDN5cydcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGJsb2NrY2hhaW46IHtcbiAgICAgICAgICAgIG5hbWU6ICdFdGhlcmV1bSBUZXN0bmV0JyxcbiAgICAgICAgICAgIHdvcmtlcjogJ2pzL2Jsb2NrYm9vay13b3JrZXIudHMnLFxuICAgICAgICAgICAgLy8gc2VydmVyOiBbJ3dzczovL2Jsb2NrYm9vay1kZXYuY29ycDoxOTEzNiddLFxuICAgICAgICAgICAgc2VydmVyOiBbJ3dzczovL2Jsb2NrYm9vay1kZXYuY29ycC5zbGRldi5jejoxOTEzNiddLFxuICAgICAgICAgICAgLy8gc2VydmVyOiAnaHR0cHM6Ly90ZXN0bmV0LWJpdGNvcmUxLnRyZXpvci5pbycsXG4gICAgICAgICAgICAvLyBzZXJ2ZXI6ICd3c3M6Ly9yb3BzdGVuMS50cmV6b3IuaW8vc29ja2V0LmlvLz90cmFuc3BvcnQ9d2Vic29ja2V0JyxcbiAgICAgICAgICAgIGRlYnVnOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC8vIGFkZHJlc3M6ICcweDEwMzI2MmYyNDNlNmY2N2QxMmQ2YTRlYTBkNDUzMDJjMWZhNGJiMGEnLFxuICAgICAgICAgICAgYWRkcmVzczogJzB4NzNkMDM4NUY0ZDhFMDBDNWU2NTA0QzYwMzBGNDdCRjYyMTI3MzZBOCcsXG4gICAgICAgICAgICBhY2NvdW50SW5mb09wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBzdGFydDogJycsXG4gICAgICAgICAgICAgICAgbGltaXQ6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlc3RpbWF0ZUZlZU9wdGlvbnM6IHtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR4OiAnJyxcbiAgICAgICAgICAgIHN1YnNjcmliZTogJzB4MTAzMjYyZjI0M2U2ZjY3ZDEyZDZhNGVhMGQ0NTMwMmMxZmE0YmIwYSdcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0ZWQ6IHRydWVcbiAgICB9LFxuXTsiXX0=