"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("worker-loader?name=js/blockbook-worker.ts!../workers/blockbook/index");

require("worker-loader?name=js/ripple-worker.ts!../workers/ripple/index");

var _config = _interopRequireDefault(require("./config"));

var _index3 = _interopRequireDefault(require("../index"));

var _this = void 0;

var handleClick = function handleClick(event) {
  var target = event.target;
  if (target.nodeName.toLowerCase() !== 'button') return;
  var network = getInputValue('network-type'); // const blockchain: Blockchain<Ripple> = BlockchainLink.get('Ripple Testnet');

  var blockchain = instances.find(function (b) {
    return b.settings.name === network;
  });
  if (!blockchain) return;
  var parentContainer = target.parentElement;
  var onResponse = handleResponse.bind(_this, parentContainer);
  var onError = handleError.bind(_this, parentContainer);

  switch (target.id) {
    case 'disconnect':
      blockchain.disconnect().then(onResponse).catch(onError);
      break;

    case 'get-info':
      blockchain.getInfo().then(onResponse).catch(onError);
      break;

    case 'get-account-info':
      {
        var payload = {
          descriptor: getInputValue('get-account-info-address'),
          details: getInputValue('get-account-info-mode') || 'basic',
          pageSize: getInputValue('get-account-info-pageSize') || 25,
          tokens: getInputValue('get-account-info-tokens') || 'derived',
          page: parseInt(getInputValue('get-account-info-page'), 2) || 10,
          from: parseInt(getInputValue('get-account-info-from'), 2),
          to: parseInt(getInputValue('get-account-info-to'), 2),
          contractFilter: getInputValue('get-account-info-contract') || ''
        };
        blockchain.getAccountInfo(payload).then(onResponse).catch(onError);
        break;
      }

    case 'estimate-fee':
      blockchain.estimateFee().then(onResponse).catch(onError);
      break;

    case 'push-transaction':
      blockchain.pushTransaction(getInputValue('push-transaction-tx')).then(onResponse).catch(onError);
      break;

    case 'subscribe-block':
      blockchain.subscribe({
        type: 'block'
      }).catch(onError);
      break;

    case 'unsubscribe-block':
      blockchain.unsubscribe({
        type: 'block'
      }).catch(onError);
      break;

    case 'subscribe-address':
      blockchain.subscribe({
        type: 'notification',
        addresses: getInputValue('subscribe-addresses').split(",")
      }).catch(onError);
      break;

    case 'unsubscribe-address':
      blockchain.unsubscribe({
        type: 'notification',
        addresses: getInputValue('subscribe-addresses').split(",")
      }).catch(onError);
      break;

    default:
      break;
  }
};

var handleResponse = function handleResponse(parent, response) {
  return prepareResponse(parent, response);
};

var handleError = function handleError(parent, error) {
  return prepareResponse(parent, error.message, true);
};

var handleBlockEvent = function handleBlockEvent(blockchain, notification) {
  var network = getInputValue('network-type');
  if (blockchain.settings.name !== network) return;
  var parent = document.getElementById('notification-block');
  prepareResponse(parent, notification);
};

var handleNotificationEvent = function handleNotificationEvent(blockchain, notification) {
  var network = getInputValue('network-type');
  if (blockchain.settings.name !== network) return;
  var parent = document.getElementById('notification-address');
  prepareResponse(parent, notification);
};

var handleConnectionEvent = function handleConnectionEvent(blockchain, status) {
  var parent = document.getElementById('notification-status');
  prepareResponse(parent, {
    blockchain: blockchain.settings.name,
    connected: status
  }, !status);
};

var handleErrorEvent = function handleErrorEvent(blockchain, message) {
  var parent = document.getElementById('notification-status');
  prepareResponse(parent, message, true);
};

var prepareResponse = function prepareResponse(parent, response) {
  var isError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var div = document.createElement('pre');
  div.className = isError ? 'response error' : 'response';
  var close = document.createElement('div');
  close.className = 'close';

  close.onclick = function () {
    if (div.parentElement) div.parentElement.removeChild(div);
  };

  div.append(close);
  var pre = document.createElement('pre');
  pre.innerHTML = JSON.stringify(response, null, 2);
  div.appendChild(pre);
  var otherResponses = parent.getElementsByClassName('response');

  if (otherResponses.length > 0) {
    if (otherResponses.length >= 3) {
      parent.removeChild(otherResponses[2]);
    }

    parent.insertBefore(div, otherResponses[0]);
  } else {
    parent.appendChild(div);
  }
}; // utils


var onClear = function onClear() {
  var responses = document.getElementsByClassName('response');

  while (responses.length) {
    var r = responses[0];
    if (r.parentElement) r.parentElement.removeChild(r);
  }
};

var getInputValue = function getInputValue(id) {
  var value = document.getElementById(id).value;
  return value;
};

var setInputValue = function setInputValue(id, value) {
  var element = document.getElementById(id);
  element.value = value;
};

var onSelectChange = function onSelectChange(event) {
  var value = event.target.value;

  var b = _config.default.find(function (i) {
    return i.blockchain.name === value;
  });

  fillValues(b.data);
  onClear();
};

var onAccountInfoModeChange = function onAccountInfoModeChange(event) {
  var advanced = document.getElementById('get-account-info-advanced');
  advanced.style.display = event.target.value === 'advanced' ? 'block' : 'none';
};

var onEstimateFeeModeChange = function onEstimateFeeModeChange(event) {
  var advanced = document.getElementById('estimate-fee-advanced');
  advanced.style.display = event.target.value === 'advanced' ? 'block' : 'none';
};

var fillValues = function fillValues(data) {
  setInputValue('get-account-info-address', data.address);
  setInputValue('get-account-info-options', JSON.stringify(data.accountInfoOptions, null, 2));
  setInputValue('estimate-fee-options', JSON.stringify(data.estimateFeeOptions, null, 2));
  setInputValue('push-transaction-tx', data.tx);
  setInputValue('subscribe-addresses', data.subscribe);
};

var init = function init(instances) {
  var select = document.getElementById('network-type');
  select.innerHTML = instances.map(function (i) {
    var b = i.blockchain;

    if (i.selected) {
      fillValues(i.data);
      return "<option value=\"".concat(b.name, "\" selected>").concat(b.name, "</option>");
    } else {
      return "<option value=\"".concat(b.name, "\">").concat(b.name, "</option>");
    }
  });
  select.onchange = onSelectChange;
  var clear = document.getElementById('clear');
  clear.onclick = onClear;
  var accountInfoMode = document.getElementById('get-account-info-mode');
  accountInfoMode.onchange = onAccountInfoModeChange;
  var estimateFeeMode = document.getElementById('estimate-fee-mode');
  estimateFeeMode.onchange = onEstimateFeeModeChange;
};

init(_config.default);
var instances = [];

_config.default.forEach(function (i) {
  var b = new _index3.default(i.blockchain);
  b.on('connected', handleConnectionEvent.bind(_this, b, true));
  b.on('disconnected', handleConnectionEvent.bind(_this, b, false));
  b.on('error', handleErrorEvent.bind(_this, b, false));
  b.on('block', handleBlockEvent.bind(_this, b));
  b.on('notification', handleNotificationEvent.bind(_this, b));
  instances.push(b);
});

document.addEventListener('click', handleClick);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,