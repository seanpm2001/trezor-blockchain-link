"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformTransactionEvent = exports.transformTransactionHistory = exports.concatTransactions = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

/* @flow */
var concatTransactions = function concatTransactions(txs, newTxs) {
  if (newTxs.length < 1) return txs;
  var unique = newTxs.filter(function (tx) {
    return txs.indexOf(tx) < 0;
  });
  return txs.concat(unique);
};

exports.concatTransactions = concatTransactions;

var transformTransactionHistory = function transformTransactionHistory(descriptor, raw) {
  var tx = raw.tx;

  if (tx.TransactionType !== 'Payment') {
    // https://github.com/ripple/ripple-lib/blob/develop/docs/index.md#transaction-types
    console.warn("Transform tx type:", tx.TransactionType, tx);
  }

  var type = tx.Account === descriptor ? 'send' : 'recv';
  var hash = tx.hash;
  var amount = tx.Amount;
  var fee = tx.Fee;
  var total = new _bignumber.default(amount).plus(fee).toString();
  return {
    type: type,
    timestamp: tx.date,
    descriptor: descriptor,
    inputs: [{
      addresses: [tx.Account]
    }],
    outputs: [{
      addresses: [tx.Destination]
    }],
    hash: hash,
    amount: amount,
    fee: fee,
    total: total,
    blockHeight: tx.ledger_index,
    blockHash: tx.ledger_hash
  };
};

exports.transformTransactionHistory = transformTransactionHistory;

var transformTransactionEvent = function transformTransactionEvent(descriptor, event) {
  var tx = event.transaction;
  var isPayment = tx.TransactionType === 'Payment';
  var type = tx.Account === descriptor ? 'send' : 'recv';
  var hash = tx.hash;
  var amount = tx.Amount;
  var fee = tx.Fee;
  var total = isPayment ? new _bignumber.default(amount).plus(fee).toString() : '0';
  var tokens = !isPayment ? [{
    name: tx.TransactionType,
    shortcut: '',
    value: '0'
  }] : undefined;
  return {
    type: type,
    timestamp: tx.date,
    descriptor: descriptor,
    inputs: [{
      addresses: [tx.Account]
    }],
    outputs: [{
      addresses: [tx.Destination]
    }],
    hash: hash,
    amount: amount,
    fee: fee,
    total: total,
    tokens: tokens,
    blockHeight: event.ledger_index,
    blockHash: event.ledger_hash
  };
};

exports.transformTransactionEvent = transformTransactionEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy93b3JrZXJzL3JpcHBsZS91dGlscy50cyJdLCJuYW1lcyI6WyJjb25jYXRUcmFuc2FjdGlvbnMiLCJ0eHMiLCJuZXdUeHMiLCJsZW5ndGgiLCJ1bmlxdWUiLCJmaWx0ZXIiLCJ0eCIsImluZGV4T2YiLCJjb25jYXQiLCJ0cmFuc2Zvcm1UcmFuc2FjdGlvbkhpc3RvcnkiLCJkZXNjcmlwdG9yIiwicmF3IiwiVHJhbnNhY3Rpb25UeXBlIiwiY29uc29sZSIsIndhcm4iLCJ0eXBlIiwiQWNjb3VudCIsImhhc2giLCJhbW91bnQiLCJBbW91bnQiLCJmZWUiLCJGZWUiLCJ0b3RhbCIsIkJpZ051bWJlciIsInBsdXMiLCJ0b1N0cmluZyIsInRpbWVzdGFtcCIsImRhdGUiLCJpbnB1dHMiLCJhZGRyZXNzZXMiLCJvdXRwdXRzIiwiRGVzdGluYXRpb24iLCJibG9ja0hlaWdodCIsImxlZGdlcl9pbmRleCIsImJsb2NrSGFzaCIsImxlZGdlcl9oYXNoIiwidHJhbnNmb3JtVHJhbnNhY3Rpb25FdmVudCIsImV2ZW50IiwidHJhbnNhY3Rpb24iLCJpc1BheW1lbnQiLCJ0b2tlbnMiLCJuYW1lIiwic2hvcnRjdXQiLCJ2YWx1ZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBRkE7QUFJTyxJQUFNQSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUNDLEdBQUQsRUFBMEJDLE1BQTFCLEVBQTZFO0FBQzNHLE1BQUlBLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQixDQUFwQixFQUF1QixPQUFPRixHQUFQO0FBQ3ZCLE1BQU1HLE1BQU0sR0FBR0YsTUFBTSxDQUFDRyxNQUFQLENBQWMsVUFBQUMsRUFBRTtBQUFBLFdBQUlMLEdBQUcsQ0FBQ00sT0FBSixDQUFZRCxFQUFaLElBQWtCLENBQXRCO0FBQUEsR0FBaEIsQ0FBZjtBQUNBLFNBQU9MLEdBQUcsQ0FBQ08sTUFBSixDQUFXSixNQUFYLENBQVA7QUFDSCxDQUpNOzs7O0FB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UyxFQUFFLENBQUN2QixFQUFFLENBQUNVLE9BQUo7QUFBYixLQUFELENBSkw7QUFLSGMsSUFBQUEsT0FBTyxFQUFFLENBQUM7QUFBRUQsTUFBQUEsU0FBUyxFQUFFLENBQUN2QixFQUFFLENBQUN5QixXQUFKO0FBQWIsS0FBRCxDQUxOO0FBT0hkLElBQUFBLElBQUksRUFBSkEsSUFQRztBQVFIQyxJQUFBQSxNQUFNLEVBQU5BLE1BUkc7QUFTSEUsSUFBQUEsR0FBRyxFQUFIQSxHQVRHO0FBVUhFLElBQUFBLEtBQUssRUFBTEEsS0FWRztBQVdIa0IsSUFBQUEsTUFBTSxFQUFOQSxNQVhHO0FBYUhSLElBQUFBLFdBQVcsRUFBRUssS0FBSyxDQUFDSixZQWJoQjtBQWNIQyxJQUFBQSxTQUFTLEVBQUVHLEtBQUssQ0FBQ0Y7QUFkZCxHQUFQO0FBZ0JILENBNUJNIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuXG5leHBvcnQgY29uc3QgY29uY2F0VHJhbnNhY3Rpb25zID0gKHR4czogQXJyYXk8VHJhbnNhY3Rpb24+LCBuZXdUeHM6IEFycmF5PFRyYW5zYWN0aW9uPik6IEFycmF5PFRyYW5zYWN0aW9uPiA9PiB7XG4gICAgaWYgKG5ld1R4cy5sZW5ndGggPCAxKSByZXR1cm4gdHhzO1xuICAgIGNvbnN0IHVuaXF1ZSA9IG5ld1R4cy5maWx0ZXIodHggPT4gdHhzLmluZGV4T2YodHgpIDwgMCk7XG4gICAgcmV0dXJuIHR4cy5jb25jYXQodW5pcXVlKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1UcmFuc2FjdGlvbkhpc3RvcnkgPSAoZGVzY3JpcHRvcjogc3RyaW5nLCByYXc6IGFueSk6IFRyYW5zYWN0aW9uID0+IHtcbiAgICBjb25zdCB7IHR4IH0gPSByYXc7XG4gICAgXG4gICAgaWYgKHR4LlRyYW5zYWN0aW9uVHlwZSAhPT0gJ1BheW1lbnQnKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yaXBwbGUvcmlwcGxlLWxpYi9ibG9iL2RldmVsb3AvZG9jcy9pbmRleC5tZCN0cmFuc2FjdGlvbi10eXBlc1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUcmFuc2Zvcm0gdHggdHlwZTpcIiwgdHguVHJhbnNhY3Rpb25UeXBlLCB0eClcbiAgICB9XG5cbiAgICBjb25zdCB0eXBlID0gdHguQWNjb3VudCA9PT0gZGVzY3JpcHRvciA/ICdzZW5kJyA6ICdyZWN2JztcbiAgICBjb25zdCBoYXNoID0gdHguaGFzaDtcbiAgICBjb25zdCBhbW91bnQgPSB0eC5BbW91bnQ7XG4gICAgY29uc3QgZmVlID0gdHguRmVlO1xuICAgIGNvbnN0IHRvdGFsID0gbmV3IEJpZ051bWJlcihhbW91bnQpLnBsdXMoZmVlKS50b1N0cmluZygpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGltZXN0YW1wOiB0eC5kYXRlLFxuXG4gICAgICAgIGRlc2NyaXB0b3IsXG4gICAgICAgIGlucHV0czogW3sgYWRkcmVzc2VzOiBbdHguQWNjb3VudF0gfV0sXG4gICAgICAgIG91dHB1dHM6IFt7IGFkZHJlc3NlczogW3R4LkRlc3RpbmF0aW9uXSB9XSxcblxuICAgICAgICBoYXNoLFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIGZlZSxcbiAgICAgICAgdG90YWwsXG5cbiAgICAgICAgYmxvY2tIZWlnaHQ6IHR4LmxlZGdlcl9pbmRleCxcbiAgICAgICAgYmxvY2tIYXNoOiB0eC5sZWRnZXJfaGFzaCxcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybVRyYW5zYWN0aW9uRXZlbnQgPSAoZGVzY3JpcHRvcjogc3RyaW5nLCBldmVudDogYW55KTogVHJhbnNhY3Rpb24gPT4ge1xuICAgIGNvbnN0IHR4ID0gZXZlbnQudHJhbnNhY3Rpb247XG4gICAgY29uc3QgaXNQYXltZW50ID0gdHguVHJhbnNhY3Rpb25UeXBlID09PSAnUGF5bWVudCc7XG4gICAgY29uc3QgdHlwZSA9IHR4LkFjY291bnQgPT09IGRlc2NyaXB0b3IgPyAnc2VuZCcgOiAncmVjdic7XG4gICAgY29uc3QgaGFzaCA9IHR4Lmhhc2g7XG4gICAgY29uc3QgYW1vdW50ID0gdHguQW1vdW50O1xuICAgIGNvbnN0IGZlZSA9IHR4LkZlZTtcbiAgICBjb25zdCB0b3RhbCA9IGlzUGF5bWVudCA/IG5ldyBCaWdOdW1iZXIoYW1vdW50KS5wbHVzKGZlZSkudG9TdHJpbmcoKSA6ICcwJztcbiAgICBjb25zdCB0b2tlbnMgPSAhaXNQYXltZW50ID8gW1xuICAgICAgICB7IG5hbWU6IHR4LlRyYW5zYWN0aW9uVHlwZSwgc2hvcnRjdXQ6ICcnLCB2YWx1ZTogJzAnIH1cbiAgICBdIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGltZXN0YW1wOiB0eC5kYXRlLFxuICAgICAgICBkZXNjcmlwdG9yLFxuICAgICAgICBpbnB1dHM6IFt7IGFkZHJlc3NlczogW3R4LkFjY291bnRdIH1dLFxuICAgICAgICBvdXRwdXRzOiBbeyBhZGRyZXNzZXM6IFt0eC5EZXN0aW5hdGlvbl0gfV0sXG5cbiAgICAgICAgaGFzaCxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICBmZWUsXG4gICAgICAgIHRvdGFsLFxuICAgICAgICB0b2tlbnMsXG5cbiAgICAgICAgYmxvY2tIZWlnaHQ6IGV2ZW50LmxlZGdlcl9pbmRleCxcbiAgICAgICAgYmxvY2tIYXNoOiBldmVudC5sZWRnZXJfaGFzaCxcbiAgICB9O1xufTtcbiJdfQ==