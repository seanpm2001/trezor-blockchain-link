"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearSubscriptions = exports.removeSubscription = exports.getSubscription = exports.addSubscription = exports.removeAddresses = exports.getAddresses = exports.addAddresses = exports.response = exports.errorHandler = exports.handshake = exports.debug = exports.getSettings = exports.setSettings = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _constants = require("../constants");

/* @flow */
var _settings;

var _debugPrefix;

var _addresses = [];
var _subscription = {};

var setSettings = function setSettings(s) {
  _settings = s;
  _debugPrefix = "[Worker \"".concat(s.name, "\"]:");
};

exports.setSettings = setSettings;

var getSettings = function getSettings() {
  return _settings;
};

exports.getSettings = getSettings;

var debug = function debug() {
  if (_settings && _settings.debug) {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args[0] === 'warn' || args[0] === 'error') {
      var _console;

      (_console = console)[args[0]].apply(_console, [_debugPrefix].concat((0, _toConsumableArray2.default)(args.slice(1))));
    } else {
      var _console2;

      (_console2 = console).log.apply(_console2, [_debugPrefix].concat(args));
    }
  }
};

exports.debug = debug;

var handshake = function handshake() {
  postMessage({
    id: -1,
    type: _constants.MESSAGES.HANDSHAKE
  });
};

exports.handshake = handshake;

var errorHandler = function errorHandler(_ref) {
  var id = _ref.id,
      error = _ref.error;
  var message = '';

  if (typeof error === 'string') {
    message = error;
  } else if ((0, _typeof2.default)(error) === 'object') {
    var keys = Object.keys(error);

    if (keys.indexOf('name') >= 0) {
      message = error.name;
    } else {
      message = error.message;
    }
  }

  postMessage({
    id: id,
    type: _constants.RESPONSES.ERROR,
    payload: message
  });
};

exports.errorHandler = errorHandler;

var response = function response(data) {
  postMessage(data);
};

exports.response = response;

var getUniqueInput = function getUniqueInput(addresses) {
  if (!Array.isArray(addresses)) return [];
  var seen = {};
  return addresses.filter(function (a) {
    if (typeof a !== 'string') return false;
    return seen.hasOwnProperty(a) ? false : seen[a] = true;
  });
};

var addAddresses = function addAddresses(addresses) {
  var unique = getUniqueInput(addresses).filter(function (a) {
    return _addresses.indexOf(a) < 0;
  });
  _addresses = _addresses.concat(unique);
  return unique;
};

exports.addAddresses = addAddresses;

var getAddresses = function getAddresses() {
  return _addresses;
};

exports.getAddresses = getAddresses;

var removeAddresses = function removeAddresses(addresses) {
  var unique = getUniqueInput(addresses);
  _addresses = _addresses.filter(function (a) {
    return unique.indexOf(a) < 0;
  });
  return _addresses;
};

exports.removeAddresses = removeAddresses;

var addSubscription = function addSubscription(type) {
  _subscription[type] = true;
};

exports.addSubscription = addSubscription;

var getSubscription = function getSubscription(type) {
  return _subscription[type];
};

exports.getSubscription = getSubscription;

var removeSubscription = function removeSubscription(type) {
  delete _subscription[type];
};

exports.removeSubscription = removeSubscription;

var clearSubscriptions = function clearSubscriptions() {
  Object.keys(_subscription).forEach(function (key) {
    return _subscription[key] = false;
  });
};

exports.clearSubscriptions = clearSubscriptions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,